
services:
  postgres:
    image: postgres:15-alpine
    container_name: cqrs_monorepo_postgres
    environment:
      POSTGRES_DB: cqrs_demo
      POSTGRES_USER: cqrs_user
      POSTGRES_PASSWORD: cqrs_password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U cqrs_user -d cqrs_demo']
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: cqrs_monorepo_kafka
    ports:
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CLUSTER_ID: 4L6g3nShT-eMCtK--X86sw
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'kafka-topics --bootstrap-server localhost:9092 --list']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: cqrs_kafka_setup
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        cub kafka-ready -b kafka:9092 1 30
        echo 'Creating Kafka topics...'
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic orders-events --partitions 1 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic orders-commands --partitions 1 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic payments-events --partitions 1 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic inventory-events --partitions 1 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic trace-events --partitions 1 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic dead-letter-queue --partitions 1 --replication-factor 1
        echo 'Kafka topics created successfully!'
        kafka-topics --bootstrap-server kafka:9092 --list
        tail -f /dev/null # Keep the container running indefinitely after setup
      "
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list | grep -q trace-events"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-service:
    build:
      context: ../packages/order-service
      dockerfile: Dockerfile
    container_name: cqrs_order_service
    ports:
      - '3001:3001'
    environment:
      PORT: 3001
      DATABASE_URL: postgresql://cqrs_user:cqrs_password@postgres:5432/cqrs_demo
      KAFKA_BROKERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka-setup:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    build:
      context: ../packages/payment-service
      dockerfile: Dockerfile
    container_name: cqrs_payment_service
    ports:
      - '3002:3002'
    environment:
      PORT: 3002
      DATABASE_URL: postgresql://cqrs_user:cqrs_password@postgres:5432/cqrs_demo
      KAFKA_BROKERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka-setup:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health']
      interval: 30s
      timeout: 10s
      retries: 3

  inventory-service:
    build:
      context: ../packages/inventory-service
      dockerfile: Dockerfile
    container_name: cqrs_inventory_service
    ports:
      - '3003:3003'
    environment:
      PORT: 3003
      DATABASE_URL: postgresql://cqrs_user:cqrs_password@postgres:5432/cqrs_demo
      KAFKA_BROKERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka-setup:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3003/health']
      interval: 30s
      timeout: 10s
      retries: 3

  trace-bff:
    build:
      context: ../packages/trace-bff
      dockerfile: Dockerfile
    container_name: cqrs_trace_bff
    ports:
      - '8080:8080' # Puerto donde escucha el BFF para WebSockets
    environment:
      PORT: 8080
      KAFKA_BROKERS: kafka:9092 # Asegurarse de que apunte al servicio Kafka
    depends_on:
      kafka-setup:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health'] # Asumiendo que tiene un health check
      interval: 30s
      timeout: 10s
      retries: 3

  trace-dashboard:
    build:
      context: ../packages/trace-dashboard
      dockerfile: Dockerfile
    container_name: cqrs_trace_dashboard
    ports:
      - '3006:3006'
    environment:
      PORT: 3006
      NEXT_PUBLIC_WEBSOCKET_URL: http://trace-bff:8080 # URL base para el cliente de Socket.IO
    depends_on:
      - trace-bff # Asegurarse de que el dashboard dependa del BFF
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3006/health']
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build:
      context: ../packages/api-gateway
      dockerfile: Dockerfile
    container_name: cqrs_api_gateway
    ports:
      - '3005:3005'
    environment:
      PORT: 3005
      DOCKER_ENV: 'true'
      ORDER_SERVICE_URL: http://order-service:3001
      PAYMENT_SERVICE_URL: http://payment-service:3002
      INVENTORY_SERVICE_URL: http://inventory-service:3003
    depends_on:
      - order-service
      - payment-service
      - inventory-service
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3005/health']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
