services:
  postgres:
    image: postgres:15-alpine
    container_name: cqrs_monorepo_postgres
    environment:
      POSTGRES_DB: cqrs_demo
      POSTGRES_USER: cqrs_user
      POSTGRES_PASSWORD: cqrs_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cqrs_user -d cqrs_demo"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: cqrs_monorepo_kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CLUSTER_ID: 4L6g3nShT-eMCtK--X86sw
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: cqrs_kafka_setup
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        cub kafka-ready -b kafka:9092 1 30
        echo 'Creating Kafka topics...'
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic orders-events --partitions 1 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic orders-commands --partitions 1 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic payments-events --partitions 1 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic inventory-events --partitions 1 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic trace-events --partitions 1 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic dead-letter-queue --partitions 1 --replication-factor 1
        echo 'Kafka topics created successfully!'
        kafka-topics --bootstrap-server kafka:9092 --list
      "
    restart: "no"

  nats:
    image: nats:2.9-alpine
    container_name: cqrs_monorepo_nats
    ports:
      - "4222:4222" # Puerto para clientes
      - "8222:8222" # Puerto para monitoreo HTTP
    # El comando -js habilita JetStream, el sistema de persistencia de NATS.
    # -m 8222 habilita el puerto de monitoreo.
    command: "-js -m 8222"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nats", "server", "check"]
      interval: 15s
      timeout: 10s
      retries: 5

  trace-bff:
    build:
      context: ./packages/trace-bff
      dockerfile: Dockerfile
    container_name: cqrs_trace_bff
    ports:
      - "8081:8080"
    environment:
      PORT: 8080
      NATS_URL: nats://nats:4222
    depends_on:
      nats:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  trace-dashboard:
    build:
      context: ./packages/trace-dashboard
      dockerfile: Dockerfile
    container_name: cqrs_trace_dashboard
    ports:
      - "3006:3000"
    environment:
      PORT: 3000
      NEXT_PUBLIC_WEBSOCKET_URL: ws://localhost:8081
    depends_on:
      trace-bff:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build:
      context: ./packages/api-gateway
      dockerfile: Dockerfile
    container_name: cqrs_api_gateway
    ports:
      - "3005:3005"
    environment:
      PORT: 3005
      ORDER_SERVICE_URL: http://order-service:3001
      PAYMENT_SERVICE_URL: http://payment-service:3002
      INVENTORY_SERVICE_URL: http://inventory-service:3003
      NATS_URL: nats://nats:4222
    depends_on:
      - order-service
      - payment-service
      - inventory-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    build:
      context: ./packages/order-service
      dockerfile: Dockerfile
    container_name: cqrs_order_service
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      DATABASE_URL: postgresql://cqrs_user:cqrs_password@postgres:5432/cqrs_demo
      KAFKA_BROKERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    build:
      context: ./packages/payment-service
      dockerfile: Dockerfile
    container_name: cqrs_payment_service
    ports:
      - "3002:3002"
    environment:
      PORT: 3002
      DATABASE_URL: postgresql://cqrs_user:cqrs_password@postgres:5432/cqrs_demo
      KAFKA_BROKERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  inventory-service:
    build:
      context: ./packages/inventory-service
      dockerfile: Dockerfile
    container_name: cqrs_inventory_service
    ports:
      - "3003:3003"
    environment:
      PORT: 3003
      DATABASE_URL: postgresql://cqrs_user:cqrs_password@postgres:5432/cqrs_demo
      KAFKA_BROKERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data: